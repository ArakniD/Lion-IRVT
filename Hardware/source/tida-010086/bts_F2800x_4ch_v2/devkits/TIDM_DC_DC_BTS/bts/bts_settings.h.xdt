%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ==== WARNING: THIS FILE IS AUTOMATICALLY GENERATED ====
 *  ==== ALL CHANGES WILL BE OVERWRITTEN WHEN IT IS REGENERATED ====
 */

/*
 *  ======== buck_settings.h.xdt ========
 */

    /* get at our module  */
    let mod = system.modules["/devkits/TIDM_DC_DC_BTS/TIDM_DC_DC_BTS"].$static;
    let powerStage = args[0].powerStage;
    let COMP = powerStage.MODEL.COMP;
    let PLANT = powerStage.MODEL.PLANT;
    let solution = args[0].solution;
%%}
#ifndef _BTS_PROJSETTINGS_H
#define _BTS_PROJSETTINGS_H

#ifdef __cplusplus

extern "C" {
#endif

//
//*****************************************************************************
//defines
//*****************************************************************************
//

//
// Lab numbers defined in buck_user_settings.h
//
#define BUCK_LAB_NUMBER                    `mod.LabNum`

//
// PWM Switching frequency and control update ratio
//
#define BUCK_DRV_EPWM_SWITCHING_FREQUENCY  ((float32_t)`mod.Fsw` * 1000)
#define BUCK_ISR_CTRL_LOOP_RATIO           `mod.IsrRatio`
#define BUCK_Gain           `mod.Gain`
//
// Treat BUCK_LAUNCHPAD_SITE = 0 as CUSTOM hardware
//
#define BUCK_LAUNCHPAD_SITE                `mod.Site`

//
// Board characteristics and calculations
//
#define BUCK_VIN_NOM_V                     ((float32_t) `mod.Vin`)
#define BUCK_VIN_MAX_SENSE_V               ((float32_t)`mod.MaxSenseVi`)
#define BUCK_VOUT_MAX_SENSE_V              ((float32_t) `mod.MaxSenseVo`)
#define BUCK_IL_MAX_SENSE_A                ((float32_t) `mod.MaxSenseI`)
#define BUCK_ILOAD_NOM_A                   ((float32_t) `mod.Iload`)

//
// CMPSS RAMPMAXREF register value (only used for PCMC)
//
#define BUCK_PCMC_CMPSS_SLOPE              ((uint16_t)`mod.RampDec`)

//
// DCL DF22 coefficients from Compensation Designer
//
#define BUCK_DCL_COMPDES_KDC               ((float32_t)`Number(COMP[0].gain)`)
#define BUCK_DCL_COMPDES_Z0                ((float32_t)`Number(COMP[0].z0/1000).toFixed(3)`)
#define BUCK_DCL_COMPDES_Z1                ((float32_t)`Number(COMP[0].z1/1000).toFixed(3)`)
#define BUCK_DCL_COMPDES_P1                ((float32_t)`Number(COMP[0].p1/1000).toFixed(3)`)

#define BUCK_DCL_COMPDES_B0                ((float32_t) `Number(COMP[0].B0).toFixed(10)`)
#define BUCK_DCL_COMPDES_B1                ((float32_t)`Number(COMP[0].B1).toFixed(10)`)
#define BUCK_DCL_COMPDES_B2                ((float32_t) `Number(COMP[0].B2).toFixed(10)`)
#define BUCK_DCL_COMPDES_A1                ((float32_t)`Number(COMP[0].A1).toFixed(10)`)
#define BUCK_DCL_COMPDES_A2                ((float32_t) `Number(COMP[0].A2).toFixed(10)`)

//
// User code settings file
//
#include "buck_user_settings.h"

#ifdef __cplusplus
}
#endif                                  /* extern "C" */

#endif //_PROJSETTINGS_H
